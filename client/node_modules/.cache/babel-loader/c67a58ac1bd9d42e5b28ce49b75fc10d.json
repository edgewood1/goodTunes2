{"ast":null,"code":"import _classCallCheck from \"/Users/meldejesus/Desktop/authnetication/scraper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/meldejesus/Desktop/authnetication/scraper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/meldejesus/Desktop/authnetication/scraper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/meldejesus/Desktop/authnetication/scraper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/meldejesus/Desktop/authnetication/scraper/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/meldejesus/Desktop/authnetication/scraper/client/src/components/playList.js\";\nimport API from \"../utils/API\";\nimport React from \"react\";\nimport { Container, Header, Names, Buttons, LargeFont, MedFont } from \"./playList_css\";\n\nvar Books =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Books, _React$Component);\n\n  function Books() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Books);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Books)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      tunes: []\n    };\n\n    _this.componentWillReceiveProps = function (_ref) {\n      var appData = _ref.appData,\n          changeState = _ref.changeState;\n\n      if (appData.scrape) {\n        // only scrapes\n        _this.scrape();\n\n        changeState({\n          scrape: 0\n        });\n      } // } else {\n      //   this.setState({ artist: appData.savedTunes });\n      // }\n      // if (appData.allTunesShow) {\n      //   this.getPlaylist();\n      // }\n\n\n      var show;\n\n      if (appData.allTunesShow) {\n        show = appData.allTunes;\n      } else {\n        show = appData.userTunes;\n\n        _this.setState({\n          tunes: show\n        }, function () {\n          console.log(_this.state.tunes);\n        });\n      }\n    };\n\n    _this.scrape = function () {\n      API.scrape().then(function (res) {\n        _this.addScrapeToDb(res[\"data\"]);\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    };\n\n    _this.addScrapeToDb = function (data) {\n      API.addScrape(data).then(function (res) {\n        console.log(res);\n\n        _this.getPlaylist();\n      });\n    };\n\n    _this.getPlaylist = function () {\n      API.getPlaylist().then(function (res) {\n        console.log(res.data);\n\n        _this.props.changeState({\n          allTunes: res[\"data\"]\n        });\n\n        _this.setState({\n          tunes: res.data\n        });\n      }).catch(function (err) {\n        console.log(err);\n\n        _this.getPlaylist();\n      });\n    };\n\n    _this.random = function () {\n      var random = Math.floor(Math.random() * 100000);\n      return random;\n    };\n\n    _this.saveTunes = function (e) {\n      // check if user is logged in\n      if (_this.props.appData.login && _this.props.appData.id) {\n        e.id = _this.props.appData.id;\n        API.saveTune(e).then(function (res) {\n          _this.props.changeState({\n            message: res.data\n          });\n        });\n      } else {\n        _this.props.changeState({\n          message: \"you'll need to login\"\n        });\n      }\n    };\n\n    _this.deleteTunes = function (e) {\n      API.deleteTunes(e).then(function (res) {\n        _this.props.changeState({\n          message: res.data\n        });\n      });\n    };\n\n    _this.playTunes = function (e) {\n      API.playTunes(e).then(function (res) {\n        _this.props.changeState({\n          playerID: res.data\n        });\n      }).catch(function (err) {\n        console.log(err);\n        return err;\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Books, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.appData.allTunesShow) {\n        this.getPlaylist();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      // const {\n      //   appData: { savedTunes, scrape }\n      // } = this.props;\n      // console.log(savedTunes);\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, this.state.tunes.map(function (e) {\n        return React.createElement(Header, {\n          key: _this2.random(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 119\n          },\n          __self: this\n        }, React.createElement(Names, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        }, React.createElement(LargeFont, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, e.artist), React.createElement(MedFont, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, \" \", e.title, \" \")), React.createElement(Buttons, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          alt: \"meaningful\",\n          src: e.source,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }), React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.playTunes(e);\n          },\n          style: {\n            margin: \"3%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, \"Play\"), _this2.props.appData.scrape ? React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.saveTunes(e);\n          },\n          style: {\n            margin: \"3%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, \"Save\") : React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this2.deleteTunes(e);\n          },\n          style: {\n            margin: \"3%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, \" \", \"Delete\", \" \")));\n      }));\n    }\n  }]);\n\n  return Books;\n}(React.Component);\n\nexport default Books;","map":{"version":3,"sources":["/Users/meldejesus/Desktop/authnetication/scraper/client/src/components/playList.js"],"names":["API","React","Container","Header","Names","Buttons","LargeFont","MedFont","Books","state","tunes","componentWillReceiveProps","appData","changeState","scrape","show","allTunesShow","allTunes","userTunes","setState","console","log","then","res","addScrapeToDb","catch","err","data","addScrape","getPlaylist","props","random","Math","floor","saveTunes","e","login","id","saveTune","message","deleteTunes","playTunes","playerID","map","artist","title","source","margin","Component"],"mappings":"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","sourcesContent":["import API from \"../utils/API\";\nimport React from \"react\";\n\nimport {\n  Container,\n  Header,\n  Names,\n  Buttons,\n  LargeFont,\n  MedFont\n} from \"./playList_css\";\n\nclass Books extends React.Component {\n  state = {\n    tunes: []\n  };\n\n  componentDidMount() {\n    if (this.props.appData.allTunesShow) {\n      this.getPlaylist();\n    }\n  }\n\n  componentWillReceiveProps = ({ appData, changeState }) => {\n    if (appData.scrape) {\n      // only scrapes\n      this.scrape();\n      changeState({ scrape: 0 });\n    }\n    // } else {\n    //   this.setState({ artist: appData.savedTunes });\n    // }\n    // if (appData.allTunesShow) {\n    //   this.getPlaylist();\n    // }\n    var show;\n    if (appData.allTunesShow) {\n      show = appData.allTunes;\n    } else {\n      show = appData.userTunes;\n      this.setState({ tunes: show }, () => {\n        console.log(this.state.tunes);\n      });\n    }\n  };\n\n  scrape = () => {\n    API.scrape()\n      .then(res => {\n        this.addScrapeToDb(res[\"data\"]);\n      })\n      .catch(err => console.log(err));\n  };\n\n  addScrapeToDb = data => {\n    API.addScrape(data).then(res => {\n      console.log(res);\n      this.getPlaylist();\n    });\n  };\n\n  getPlaylist = () => {\n    API.getPlaylist()\n      .then(res => {\n        console.log(res.data);\n\n        this.props.changeState({ allTunes: res[\"data\"] });\n        this.setState({ tunes: res.data });\n      })\n      .catch(err => {\n        console.log(err);\n        this.getPlaylist();\n      });\n  };\n\n  random = () => {\n    var random = Math.floor(Math.random() * 100000);\n\n    return random;\n  };\n\n  saveTunes = e => {\n    // check if user is logged in\n    if (this.props.appData.login && this.props.appData.id) {\n      e.id = this.props.appData.id;\n      API.saveTune(e).then(res => {\n        this.props.changeState({ message: res.data });\n      });\n    } else {\n      this.props.changeState({ message: \"you'll need to login\" });\n    }\n  };\n\n  deleteTunes = e => {\n    API.deleteTunes(e).then(res => {\n      this.props.changeState({ message: res.data });\n    });\n  };\n\n  playTunes = e => {\n    API.playTunes(e)\n      .then(res => {\n        this.props.changeState({ playerID: res.data });\n      })\n      .catch(err => {\n        console.log(err);\n        return err;\n      });\n  };\n\n  render() {\n    // const {\n    //   appData: { savedTunes, scrape }\n    // } = this.props;\n    // console.log(savedTunes);\n    return (\n      <Container>\n        {this.state.tunes.map(e => (\n          <Header key={this.random()}>\n            <Names>\n              <LargeFont>{e.artist}</LargeFont>\n              <MedFont> {e.title} </MedFont>\n            </Names>\n            <Buttons>\n              <img alt=\"meaningful\" src={e.source} />\n              <button\n                onClick={() => this.playTunes(e)}\n                style={{ margin: \"3%\" }}\n              >\n                Play\n              </button>\n              {this.props.appData.scrape ? (\n                <button\n                  onClick={() => this.saveTunes(e)}\n                  style={{ margin: \"3%\" }}\n                >\n                  Save\n                </button>\n              ) : (\n                <button\n                  onClick={() => this.deleteTunes(e)}\n                  style={{ margin: \"3%\" }}\n                >\n                  {\" \"}\n                  Delete{\" \"}\n                </button>\n              )}\n            </Buttons>\n          </Header>\n        ))}\n      </Container>\n    );\n  }\n}\n\nexport default Books;\n"]},"metadata":{},"sourceType":"module"}